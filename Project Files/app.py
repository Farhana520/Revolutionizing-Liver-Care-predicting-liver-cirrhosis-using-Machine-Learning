{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41b083d9-c0e6-4859-84f0-38326fdfc650",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "flask App development\n",
    "\n",
    "\"\"\"\n",
    "from flask import Flask,render_template,request\n",
    "import sklearn\n",
    "app = Flask(__name__)\n",
    "import pickle\n",
    "model = pickle.load(open(\"E:\\\\liver_prediction.pkl\",\"rb\"))\n",
    "\n",
    "@app.route(\"/\")\n",
    "def index():\n",
    "    return render_template(\"page.html\")\n",
    "\n",
    "@app.route('/index', methods = ['POST','GET'])\n",
    "def index1():\n",
    "    if request.method =='POST':\n",
    "        AGE =float(request.form['AGE'])\n",
    "        Gender =float(request.form['Gender'])\n",
    "        Place = float( request.form[\"Place(location where the patient lives)\"])\n",
    "        Duration_of_alcohol_consumption = float(request.form[\"Duration of alcohol consumption(years)\"])\n",
    "        Quantity_of_alcohol_consumption  = float( request.form[\"Quantity of alcohol consumption (quarters/day)\"])\n",
    "        \n",
    "        Type_of_alcohol_consumed = float(request.form[\"Type of alcohol consumed\"])\n",
    "        Blood_pressure = float(request.form[\"Blood pressure (mmhg)\"])\n",
    "        Obesity = float(request.form[\"Obesity\"])\n",
    "        Family_history_of_cirrhosis_hereditary =float( request.form[\"Family history of cirrhosis/ hereditary\"])\n",
    "        \n",
    "        Hemoglobin = float(request.form[\"Hemoglobin  (g/dl)\"])\n",
    "        PCV = float(request.form[\"PCV  (%)\"])\n",
    "        RBC = float(request.form[\"RBC  (million cells/microliter)\"])\n",
    "        MCV = float(request.form[\"MCV   (femtoliters/cell)\"])\n",
    "        MCH = float(request.form[\"MCH  (picograms/cell)\"])\n",
    "        MCHC = float(request.form[\"MCHC  (grams/deciliter)\"])\n",
    "        Total_Count = float(request.form[\"Total Count\"])\n",
    "        Polymorphs = float(request.form[\"Polymorphs  (%)\"])\n",
    "        Lymphocytes = float(request.form[\"Lymphocytes  (%)\"])\n",
    "        Monocytes = float(request.form[\"Monocytes   (%)\"])\n",
    "        Eosinophils = float(request.form[\"Eosinophils   (%)\"])\n",
    "        Basophils  = float(request.form[\"Basophils  (%)\"])\n",
    "        Platelet_Count  = float(request.form[\"Platelet Count  (lakhs/mm)\"])\n",
    "        Direct  = float(request.form[\"Direct    (mg/dl)\"])\n",
    "        Indirect = float(request.form[\"Indirect     (mg/dl)\"])\n",
    "        Total_Protein  = float(request.form[\"Total Protein     (g/dl)\"])\n",
    "        Albumin = float(request.form[\"Albumin   (g/dl)\"])\n",
    "        Globulin = float(request.form[\"Globulin  (g/dl)\"])\n",
    "        \n",
    "        AL_Phosphatase = float(request.form[\"AL.Phosphatase      (U/L)\"])\n",
    "        SGOT_AST = float(request.form[\"SGOT/AST      (U/L)\"])\n",
    "        USG_Abdomen = float(request.form[\"USG Abdomen (diffuse liver or  not)\"])\n",
    "        Outcome = float(request.form[\"Outcome\"])\n",
    "        data = [[AGE,Gender,Place,Duration_of_alcohol_consumption,Quantity_of_alcohol_consumption,Type_of_alcohol_consumed,Blood_pressure,Obesity,Family_history_of_cirrhosis_hereditary,Hemoglobin,PCV,RBC,MCV,MCH,MCHC,Total_Count,Polymorphs,Lymphocytes,Monocytes,Eosinophils,Basophils,Platelet_Count,Direct,Indirect,Total_Protein,Albumin,Globulin,AL_Phosphatase,SGOT_AST,USG_Abdomen,Outcome]]\n",
    "        prediction = model.predict(data)\n",
    "        prediction = int(prediction[0])\n",
    "        if prediction==0:\n",
    "            return render_template(\"index.html\",prediction=\"Non-Diabetes\")\n",
    "        \n",
    "        else:\n",
    "            return render_template(\"index.html\",prediction=\"Diabetes\")\n",
    "    return render_template('index.html')\n",
    "    \n",
    "    \n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug = True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
